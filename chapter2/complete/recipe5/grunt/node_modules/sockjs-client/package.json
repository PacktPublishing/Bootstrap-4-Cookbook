{
  "_args": [
    [
      {
        "raw": "sockjs-client@git://github.com/substack/sockjs-client.git#browserify-npm",
        "scope": null,
        "escapedName": "sockjs-client",
        "name": "sockjs-client",
        "rawSpec": "git://github.com/substack/sockjs-client.git#browserify-npm",
        "spec": "git://github.com/substack/sockjs-client.git#browserify-npm",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:substack/sockjs-client.git#browserify-npm",
          "sshUrl": "git+ssh://git@github.com/substack/sockjs-client.git#browserify-npm",
          "httpsUrl": "git+https://github.com/substack/sockjs-client.git#browserify-npm",
          "gitUrl": "git://github.com/substack/sockjs-client.git#browserify-npm",
          "shortcut": "github:substack/sockjs-client#browserify-npm",
          "directUrl": "https://raw.githubusercontent.com/substack/sockjs-client/browserify-npm/package.json"
        }
      },
      "C:\\Users\\PC\\Desktop\\harp11\\grunt\\node_modules\\shoe"
    ]
  ],
  "_from": "git://github.com/substack/sockjs-client.git#browserify-npm",
  "_id": "sockjs-client@0.0.0-unreleasable",
  "_inCache": true,
  "_location": "/sockjs-client",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sockjs-client@git://github.com/substack/sockjs-client.git#browserify-npm",
    "scope": null,
    "escapedName": "sockjs-client",
    "name": "sockjs-client",
    "rawSpec": "git://github.com/substack/sockjs-client.git#browserify-npm",
    "spec": "git://github.com/substack/sockjs-client.git#browserify-npm",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:substack/sockjs-client.git#browserify-npm",
      "sshUrl": "git+ssh://git@github.com/substack/sockjs-client.git#browserify-npm",
      "httpsUrl": "git+https://github.com/substack/sockjs-client.git#browserify-npm",
      "gitUrl": "git://github.com/substack/sockjs-client.git#browserify-npm",
      "shortcut": "github:substack/sockjs-client#browserify-npm",
      "directUrl": "https://raw.githubusercontent.com/substack/sockjs-client/browserify-npm/package.json"
    }
  },
  "_requiredBy": [
    "/shoe"
  ],
  "_resolved": "git://github.com/substack/sockjs-client.git#40d48d06b4dba884416bf88a051f76ca3c8ffcae",
  "_shasum": "3d401f32f05053cdd6575956c5a4f9aa099ef860",
  "_shrinkwrap": null,
  "_spec": "sockjs-client@git://github.com/substack/sockjs-client.git#browserify-npm",
  "_where": "C:\\Users\\PC\\Desktop\\harp11\\grunt\\node_modules\\shoe",
  "author": {
    "name": "Marek Majkowski"
  },
  "bugs": {
    "url": "https://github.com/sockjs/sockjs-client/issues"
  },
  "dependencies": {},
  "description": "SockJS-client is a browser JavaScript library that provides a WebSocket-like object. SockJS gives you a coherent, cross-browser, Javascript API which creates a low latency, full duplex, cross-domain communication channel between the browser and the web server.",
  "devDependencies": {
    "coffee-script": "1.2.x",
    "node-static": "0.5.9",
    "optparse": "1.0.3",
    "uglify-js": "1.2.5"
  },
  "gitHead": "40d48d06b4dba884416bf88a051f76ca3c8ffcae",
  "homepage": "http://sockjs.org",
  "keywords": [
    "websockets",
    "websocket"
  ],
  "main": "sockjs.js",
  "name": "sockjs-client",
  "optionalDependencies": {},
  "readme": "SockJS family:\r\n\r\n  * [SockJS-client](https://github.com/sockjs/sockjs-client) JavaScript client library\r\n  * [SockJS-node](https://github.com/sockjs/sockjs-node) Node.js server\r\n  * [SockJS-erlang](https://github.com/sockjs/sockjs-erlang) Erlang server\r\n  * [SockJS-lua](https://github.com/luvit/sockjs-luvit) Lua/Luvit server\r\n  * [SockJS-tornado](https://github.com/MrJoes/sockjs-tornado) Python/Tornado server\r\n  * [vert.x](https://github.com/purplefox/vert.x) Java/vert.x server\r\n\r\nWork in progress:\r\n\r\n  * [SockJS-ruby](https://github.com/sockjs/sockjs-ruby)\r\n  * [SockJS-netty](https://github.com/cgbystrom/sockjs-netty)\r\n  * [SockJS-gevent](https://github.com/sdiehl/sockjs-gevent)\r\n  * [pyramid-SockJS](https://github.com/fafhrd91/pyramid_sockjs)\r\n  * [wildcloud-websockets](https://github.com/wildcloud/wildcloud-websockets)\r\n  * [SockJS-cyclone](https://github.com/flaviogrossi/sockjs-cyclone)\r\n  * [SockJS-twisted](https://github.com/Fugiman/sockjs-twisted/)\r\n\r\n\r\nSockJS-client\r\n=============\r\n\r\nSockJS is a browser JavaScript library that provides a WebSocket-like\r\nobject. SockJS gives you a coherent, cross-browser, Javascript API\r\nwhich creates a low latency, full duplex, cross-domain communication\r\nchannel between the browser and the web server.\r\n\r\nUnder the hood SockJS tries to use native WebSockets first. If that\r\nfails it can use a variety of browser-specific transport protocols and\r\npresents them through WebSocket-like abstractions.\r\n\r\nSockJS is intended to work for all modern browsers and in environments\r\nwhich don't support WebSocket protcol, for example behind restrictive\r\ncorporate proxies.\r\n\r\nSockJS-client does require a server counterpart:\r\n\r\n * [SockJS-node](https://github.com/sockjs/sockjs-node) is a SockJS\r\n   server for Node.js.\r\n\r\n\r\nPhilosophy:\r\n\r\n * The API should follow\r\n   [HTML5 Websockets API](http://dev.w3.org/html5/websockets/) as\r\n   closely as possible.\r\n * All the transports must support cross domain connections out of the\r\n   box. It's possible and recommended to host SockJS server on\r\n   different server than your main web site.\r\n * There is a support for at least one streaming protocol for every\r\n   major browser.\r\n * Streaming transports should work cross-domain and\r\n   should support cookies (for cookie-based sticky sessions).\r\n * Polling transports are be used as a fallback for old browsers and\r\n   hosts behind restrictive proxies.\r\n * Connection establishment should be fast and lightweight.\r\n * No Flash inside (no need to open port 843 - which doesn't work\r\n   through proxies, no need to host 'crossdomain.xml', no need\r\n   [to wait for 3 seconds](https://github.com/gimite/web-socket-js/issues/49)\r\n   in order to detect problems)\r\n\r\n\r\nSubscribe to\r\n[SockJS mailing list](https://groups.google.com/forum/#!forum/sockjs) for\r\ndiscussions and support.\r\n\r\n\r\nLive QUnit tests and smoke tests\r\n--------------------------------\r\n\r\nSockJS comes with some QUnit tests and a few smoke tests (using\r\n[SockJS-node](https://github.com/sockjs/sockjs-client) on the server\r\nside). At the moment they are deployed in few places:\r\n\r\n * http://sockjs.popcnt.org/ and https://sockjs.popcnt.org/ (hosted in Europe)\r\n * http://sockjs.cloudfoundry.com/ (CloudFoundry, websockets disabled, loadbalanced)\r\n * https://sockjs.cloudfoundry.com/ (CloudFoundry SSL, websockets disabled, loadbalanced)\r\n\r\n\r\nExample\r\n-------\r\n\r\nSockJS mimics [WebSockets API](http://dev.w3.org/html5/websockets/)\r\nbut instead of `WebSocket` there is a `SockJS` Javascript object.\r\n\r\nFirst, you need to load SockJS JavaScript library, for example you can\r\nput that in your http head:\r\n\r\n    <script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\">\r\n      </script>\r\n\r\nAfter the script is loaded you can establish a connection with the\r\nSockJS server. Here's a simple example:\r\n\r\n```javascript\r\n<script>\r\n   var sock = new SockJS('http://mydomain.com/my_prefix');\r\n   sock.onopen = function() {\r\n       console.log('open');\r\n   };\r\n   sock.onmessage = function(e) {\r\n       console.log('message', e.data);\r\n   };\r\n   sock.onclose = function() {\r\n       console.log('close');\r\n   };\r\n</script>\r\n```\r\n\r\nSockJS-client API\r\n-----------------\r\n\r\n### SockJS class\r\n\r\nSimilar to 'WebSocket' class 'SockJS' constructor takes one, or more arguments:\r\n\r\n```javascript\r\nvar sockjs = new SockJS(url, _reserved, options);\r\n```\r\n\r\nWhere `options` is a hash which can contain:\r\n\r\n *  **debug (boolean)**\r\n\r\n    Print some debugging messages using 'console.log'.\r\n\r\n *  **devel (boolean)**\r\n\r\n    Development mode. Currently setting it disables caching of the\r\n    'iframe.html'.\r\n\r\n *  **protocols_whitelist (list of strings)**\r\n\r\n    Sometimes it is useful to disable some fallback protocols. This\r\n    option allows you to supply a list protocols that may be used by\r\n    SockJS. By default all available protocols will be used, which is\r\n    equivalent to supplying: \"['websocket', 'xdr-streaming', 'xhr-streaming',\r\n    'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling',\r\n    'iframe-xhr-polling', 'jsonp-polling']\"\r\n\r\n\r\nAlthough the 'SockJS' object tries to emulate the 'WebSocket'\r\nbehaviour, it's impossible to support all features. One of the\r\nimportant SockJS limitations is the fact that you're not allowed to\r\nopen more than one SockJS connection to a single domain at a time.\r\nThis limitation is caused by a in-browser limit of outgoing\r\nconnections - usually [browsers don't allow opening more than two\r\noutgoing connections to a single domain](http://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser). Single SockJS session\r\nrequires those two connections - one for downloading data, other for\r\nsending messages.  Opening second SockJS session at the same time\r\nwould most probably block and can result in both sessions timing out.\r\n\r\nOpening more than one SockJS connection at a time is generally a\r\nbad practice. If you absolutely must do it, you can use\r\nmutliple subdomains, using different subdomain for every\r\nSockJS connection.\r\n\r\nSupported transports, by browser (html served from http:// or https://)\r\n-----------------------------------------------------------------------\r\n\r\n_Browser_       | _Websockets_     | _Streaming_ | _Polling_\r\n----------------|------------------|-------------|-----------\r\nIE 6, 7         | no               | no          | jsonp-polling\r\nIE 8, 9 (cookies=no) |    no       | xdr-streaming &dagger; | xdr-polling &dagger;\r\nIE 8, 9 (cookies=yes)|    no       | iframe-htmlfile | iframe-xhr-polling\r\nIE 10           | rfc6455          | xhr-streaming   | xhr-polling\r\nChrome 6-13     | hixie-76         | xhr-streaming   | xhr-polling\r\nChrome 14+      | hybi-10 / rfc6455| xhr-streaming   | xhr-polling\r\nFirefox <10     | no &Dagger;      | xhr-streaming   | xhr-polling\r\nFirefox 10+     | hybi-10 / rfc6455| xhr-streaming   | xhr-polling\r\nSafari 5        | hixie-76         | xhr-streaming   | xhr-polling\r\nOpera 10.70+    | no &Dagger;      | iframe-eventsource | iframe-xhr-polling\r\nKonqueror       | no               | no          | jsonp-polling\r\n\r\n\r\n * **&dagger;**: IE 8+ supports [XDomainRequest][^9], which is\r\n    esentially a modified AJAX/XHR that can do requests across\r\n    domains. But unfortunately it doesn't send any cookies, which\r\n    makes it inaproppriate for deployments when the load balancer uses\r\n    JSESSIONID cookie to do sticky sessions.\r\n\r\n * **&Dagger;**: Firefox 4.0 and Opera 11.00 and shipped with disabled\r\n     Websockets \"hixie-76\". They can still be enabled by manually\r\n     changing a browser setting.\r\n\r\nSupported transports, by browser (html served from file://)\r\n-----------------------------------------------------------\r\n\r\nSometimes you may want to serve your html from \"file://\" address - for\r\ndevelopment or if you're using PhoneGap or similar technologies. But\r\ndue to the Cross Origin Policy files served from \"file://\" have no\r\nOrigin, and that means some of SockJS transports won't work. For this\r\nreason the SockJS protocol table is different than usually, major\r\ndifferences are:\r\n\r\n_Browser_       | _Websockets_  | _Streaming_        | _Polling_\r\n----------------|---------------|--------------------|-----------\r\nIE 8, 9         | same as above | iframe-htmlfile    | iframe-xhr-polling\r\nOther           | same as above | iframe-eventsource | iframe-xhr-polling\r\n\r\nSupported transports, by name\r\n-----------------------------\r\n\r\n_Transport_          | _References_\r\n---------------------|---------------\r\nwebsocket (rfc6455)  | [rfc 6455][^10]\r\nwebsocket (hixie-76) | [draft-hixie-thewebsocketprotocol-76][^1]\r\nwebsocket (hybi-10)  | [draft-ietf-hybi-thewebsocketprotocol-10][^2]\r\nxhr-streaming        | Transport using [Cross domain XHR][^5] [streaming][^7] capability (readyState=3).\r\nxdr-streaming        | Transport using [XDomainRequest][^9] [streaming][^7] capability (readyState=3).\r\niframe-eventsource   | [EventSource][^4] used from an [iframe via postMessage][^3].\r\niframe-htmlfile      | [HtmlFile][^8] used from an [iframe via postMessage][^3].\r\nxhr-polling          | Long-polling using [cross domain XHR][^5].\r\nxdr-polling          | Long-polling using [XDomainRequest][^9].\r\niframe-xhr-polling   | Long-polling using normal AJAX from an [iframe via postMessage][^3].\r\njsonp-polling        | Slow and old fashioned [JSONP polling][^6]. This transport will show \"busy indicator\" (aka: \"spinning wheel\") when sending data.\r\n\r\n\r\n[^1]: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\r\n[^2]: http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10\r\n[^3]: https://developer.mozilla.org/en/DOM/window.postMessage\r\n[^4]: http://dev.w3.org/html5/eventsource/\r\n[^5]: https://secure.wikimedia.org/wikipedia/en/wiki/XMLHttpRequest#Cross-domain_requests\r\n[^6]: https://secure.wikimedia.org/wikipedia/en/wiki/JSONP\r\n[^7]: http://www.debugtheweb.com/test/teststreaming.aspx\r\n[^8]: http://cometdaily.com/2007/11/18/ie-activexhtmlfile-transport-part-ii/\r\n[^9]: http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\r\n[^10]: http://www.rfc-editor.org/rfc/rfc6455.txt\r\n\r\n\r\nConnecting to SockJS without the client\r\n---------------------------------------\r\n\r\nAlthough the main point of SockJS it to enable browser-to-server\r\nconnectivity, it is possible to connect to SockJS from an external\r\napplication. Any SockJS server complying with 0.3 protocol does\r\nsupport a raw WebSocket url. The raw WebSocket url for the test server\r\nlooks like:\r\n\r\n * ws://localhost:8081/echo/websocket\r\n\r\nYou can connect any WebSocket RFC 6455 compliant WebSocket client to\r\nthis url. This can be a command line client, external application,\r\nthird party code or even a browser (though I don't know why you would\r\nwant to do so).\r\n\r\n\r\nDeployment\r\n----------\r\n\r\nIn order to utilize best performance you should use the SockJS-client\r\nreleases hosted on SockJS CDN. You should use a version of sockjs-client\r\nthat supports the protocol used by your server. For example:\r\n\r\n    <script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\">\r\n      </script>\r\n\r\nA list of files hosted on a CDN is available here: http://sockjs.github.com/sockjs-client/ .\r\n\r\nYou can also use or CDN via https (using Cloud Front domain name):\r\n\r\n    <script src=\"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.js\">\r\n      </script>\r\n\r\nFor server-side deployment tricks, especially about load balancing and\r\nsession stickiness, take a look at the\r\n[SockJS-node readme](https://github.com/sockjs/sockjs-node#readme).\r\n\r\n\r\nDevelopment and testing\r\n-----------------------\r\n\r\nSockJS-client needs [Node.js](http://nodejs.org/) for running a test\r\nserver and JavaScript minification. If you want to work on\r\nSockJS-client source code, check out the git repo and follow this\r\nsteps:\r\n\r\n    cd sockjs-client\r\n    npm install --dev\r\n\r\nTo generate JavaScript run:\r\n\r\n    make sockjs.js\r\n\r\nTo generate minified JavaScript run:\r\n\r\n    make sockjs.min.js\r\n\r\n(To generate both run `make build`.)\r\n\r\n\r\n### Testing\r\n\r\nOnce you compiled SockJS-client you may want to check if your changes\r\npass all the tests. To run the tests you need a server that can answer\r\nvarious SockJS requests. A common way is to use `SockJS-node` test\r\nserver for that. To run it (by default it will be listening on port 8081):\r\n\r\n    cd sockjs-node\r\n    npm install --dev\r\n    make build\r\n    make test_server\r\n\r\nAt this point you're ready to run a SockJS-client server that will\r\nserver your freshly compiled JavaScript and various static http and\r\njavscript files (by default it will run on port 8080).\r\n\r\n    cd sockjs-client\r\n    make test\r\n\r\nAt that point you should have two web servers running: sockjs-node on\r\n8081 and sockjs-client on 8080. When you open the browser on\r\n[http://localhost:8080/](http://localhost:8080/) you should be able\r\nrun the QUnit tests against your sockjs-node server.\r\n\r\nIf you look at your browser console you will see warnings like that:\r\n\r\n    Incompatibile SockJS! Main site uses: \"a\", the iframe: \"b\".\r\n\r\nThis is due to a fact that SockJS-node test server is using compiled\r\njavascript from CDN, rather than your freshly compiled version. To fix\r\nthat you must amend `sockjs_url` that is used by SockJS-node test\r\nserver. Edit the [`config.js`](https://github.com/sockjs/sockjs-node/blob/master/examples/test_server/config.js) file:\r\n\r\n    vim sockjs-node/examples/test_server/config.js\r\n\r\nAnd replace `sockjs_url` setting which by default points to CDN:\r\n\r\n    sockjs_url: 'http://cdn.sockjs.org/sockjs-0.3.min.js',\r\n\r\nto a freshly compiled sockjs, for example:\r\n\r\n    sockjs_url: 'http://localhost:8080/lib/sockjs.js',\r\n\r\n\r\nAlso, if you want to run tests agains SockJS server not running on\r\n`localhost:8081` you may want to edit the\r\n[`tests/config.js`](https://github.com/sockjs/sockjs-client/blob/master/tests/config.js)\r\nfile.\r\n\r\nAdditionally, if you're doing more serious development consider using\r\n`make serve`, which will automatically reload the server when you\r\nmodify the source code.\r\n\r\n\r\nBrowser Quirks\r\n--------------\r\n\r\nThere are various browser quirks which we don't intend to address:\r\n\r\n * Pressing ESC in Firefox closes SockJS connection. For a workaround\r\n   and discussion see [#18](https://github.com/sockjs/sockjs-client/issues/18).\r\n * Jsonp-polling transport will show a \"spinning wheel\" (aka. \"busy indicator\")\r\n   when sending data.\r\n * You can't open more than one SockJS connection to one domain at the\r\n   same time due to [the browsers limit of consurrent connections](http://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser)\r\n   (this limit is not counting native websockets connections).\r\n * Although SockJS is trying to escape any strange Unicode characters\r\n   (even invalid ones - [like surrogates \\xD800-\\xDBFF](http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates) or [\\xFFFE and \\xFFFF](https://en.wikipedia.org/wiki/Unicode#Character_General_Category))\r\n   it's advisable to use only valid characters. Using invalid\r\n   characters is a bit slower, and may not work with SockJS servers\r\n   that have a proper Unicode support.\r\n * Having a global function called `onmessage` or such is probably a\r\n   bad idea, as it could be called by the built-in `postMessage` API.\r\n * From SockJS point of view there is nothing special about\r\n   SSL/HTTPS. Connecting between unencrypted and encrypted sites\r\n   should work just fine.\r\n * Although SockJS does best to support both prefix and cookie based\r\n   sticky sessions, the latter may not work well cross-domain with\r\n   browsers that don't accept third-party cookies by default (Safari).\r\n   In order to get around this make sure you're connecting to sockjs\r\n   from the same parent domain as the main site. For example\r\n   'sockjs.a.com' is able to set cookies if you're connecting from\r\n   'www.a.com' or 'a.com'.\r\n * Trying to connect from secure \"https://\" to insecure \"http://\" is\r\n   not good idea. The other way around should be fine.\r\n * Long polling is known to cause problems on Heroku, but\r\n   [workaround for SockJS is available](https://github.com/sockjs/sockjs-node/issues/57#issuecomment-5242187).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sockjs/sockjs-client.git"
  },
  "version": "0.0.0-unreleasable"
}
